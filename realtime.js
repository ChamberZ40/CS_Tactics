// ÂÆûÊó∂ÂêåÊ≠•Ê®°Âùó - Ê®°ÊãüWebSocketË°å‰∏∫
class RealtimeSync {
    constructor() {
        this.isEnabled = false;
        this.syncInterval = null;
        this.lastSyncTime = 0;
        this.callbacks = {
            onRoomUpdate: null,
            onUserJoin: null,
            onUserLeave: null
        };
    }
    
    // ÂêØÁî®ÂÆûÊó∂ÂêåÊ≠•
    enable(roomId, userId) {
        this.roomId = roomId;
        this.userId = userId;
        this.isEnabled = true;
        this.lastSyncTime = Date.now();
        
        // ÊØèÁßíÊ£ÄÊü•Êõ¥Êñ∞
        this.syncInterval = setInterval(() => {
            this.checkForUpdates();
        }, 1000);
        
        console.log('ÂÆûÊó∂ÂêåÊ≠•Â∑≤ÂêØÁî®');
    }
    
    // Á¶ÅÁî®ÂÆûÊó∂ÂêåÊ≠•
    disable() {
        this.isEnabled = false;
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        console.log('ÂÆûÊó∂ÂêåÊ≠•Â∑≤Á¶ÅÁî®');
    }
    
    // ËÆæÁΩÆÂõûË∞ÉÂáΩÊï∞
    setCallbacks(callbacks) {
        this.callbacks = { ...this.callbacks, ...callbacks };
    }
    
    // Ê£ÄÊü•Êõ¥Êñ∞
    checkForUpdates() {
        if (!this.isEnabled || !this.roomId) return;
        
        const roomData = this.getRoomData();
        if (!roomData) return;
        
        // Ê£ÄÊü•ÊàøÈó¥Êï∞ÊçÆÊõ¥Êñ∞
        if (roomData.lastUpdate > this.lastSyncTime) {
            this.handleRoomUpdate(roomData);
        }
        
        // Ê£ÄÊü•Áî®Êà∑ÂèòÂåñ
        this.checkUserChanges(roomData);
        
        this.lastSyncTime = Date.now();
    }
    
    // Â§ÑÁêÜÊàøÈó¥Êõ¥Êñ∞
    handleRoomUpdate(roomData) {
        if (this.callbacks.onRoomUpdate) {
            this.callbacks.onRoomUpdate(roomData);
        }
    }

    
    // Ê£ÄÊü•Áî®Êà∑ÂèòÂåñ
    checkUserChanges(roomData) {
        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞Áî®Êà∑Âä†ÂÖ•/Á¶ªÂºÄÁöÑÊ£ÄÊµã
        // ÁÆÄÂåñÂÆûÁé∞ÔºåÂÆûÈôÖÈ°πÁõÆ‰∏≠ÂèØ‰ª•Êõ¥Â§çÊùÇ
    }
    
    // Ëé∑ÂèñÊàøÈó¥Êï∞ÊçÆ
    getRoomData() {
        const data = localStorage.getItem(`room_${this.roomId}`);
        return data ? JSON.parse(data) : null;
    }
    
    // ÂπøÊí≠Êõ¥Êñ∞
    broadcast(type, data) {
        if (!this.isEnabled) return;
        
        // Âú®ÁúüÂÆûÁöÑWebSocketÂÆûÁé∞‰∏≠ÔºåËøôÈáå‰ºöÂèëÈÄÅÊï∞ÊçÆÂà∞ÊúçÂä°Âô®
        // Áé∞Âú®Êàë‰ª¨Âè™ÊòØËß¶ÂèëÊú¨Âú∞Êõ¥Êñ∞
        const roomData = this.getRoomData() || {
            users: [],
            shapes: [],
            currentMap: 'de_dust2'
        };
        
        switch (type) {
            case 'shape_update':
                roomData.shapes = data;
                break;
            case 'map_change':
                roomData.currentMap = data;
                break;
            case 'user_join':
                // Áî®Êà∑Âä†ÂÖ•‰∫ã‰ª∂Â§ÑÁêÜ
                if (data && data.user) {
                    const existingUserIndex = roomData.users.findIndex(u => u.id === data.user.id);
                    if (existingUserIndex >= 0) {
                        roomData.users[existingUserIndex] = data.user;
                    } else {
                        roomData.users.push(data.user);
                    }
                    console.log(`üëã Áî®Êà∑ ${data.user.name} Âä†ÂÖ•‰∫ÜÊàøÈó¥`);
                }
                break;
            case 'user_leave':
                // Áî®Êà∑Á¶ªÂºÄ‰∫ã‰ª∂Â§ÑÁêÜ
                if (data && data.userId) {
                    const originalCount = roomData.users.length;
                    roomData.users = roomData.users.filter(u => u.id !== data.userId);
                    const newCount = roomData.users.length;
                    
                    if (originalCount > newCount) {
                        console.log(`üö™ Áî®Êà∑ ${data.userName || data.userId} Á¶ªÂºÄ‰∫ÜÊàøÈó¥`);
                        
                        // Ëß¶ÂèëÁî®Êà∑Á¶ªÂºÄÂõûË∞É
                        if (this.callbacks.onUserLeave) {
                            this.callbacks.onUserLeave(data);
                        }
                    }
                }
                break;
        }
        
        roomData.lastUpdate = Date.now();
        localStorage.setItem(`room_${this.roomId}`, JSON.stringify(roomData));
        
        // Á´ãÂç≥Ëß¶ÂèëÊõ¥Êñ∞Ê£ÄÊü•
        setTimeout(() => {
            this.checkForUpdates();
        }, 100);
    }
}

// ÂØºÂá∫Ê®°Âùó
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RealtimeSync;
} else {
    window.RealtimeSync = RealtimeSync;
}